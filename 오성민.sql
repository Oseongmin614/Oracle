--1
SELECT TO_CHAR(OUTBOUND_DATE, 'YYYY-MM') AS OUT_DATE, COUNT(INVOICE_NO) AS INV_CNT, SUM(SET_QTY) AS SET_QTY
  FROM LO_OUT_M 
 WHERE OUTBOUND_DATE BETWEEN '2019-06-01' AND '2019-08-31'
 GROUP BY TO_CHAR(OUTBOUND_DATE, 'YYYY-MM')
 ORDER BY TO_CHAR(OUTBOUND_DATE, 'YYYY-MM');



--2
SELECT M.OUT_TYPE_DIV, SUM(D.ORDER_QTY) AS SUM_QTY
  FROM LO_OUT_M M
       JOIN LO_OUT_D D ON D.INVOICE_NO = M.INVOICE_NO
                      AND M.OUTBOUND_DATE ='2019-09-03'
 GROUP BY M.OUT_TYPE_DIV
HAVING SUM(D.ORDER_QTY) > 5000
 ORDER BY   M.OUT_TYPE_DIV,
            CASE WHEN M.OUT_TYPE_DIV LIKE 'M1%'THEN M.OUT_TYPE_DIV END ASC ,
            CASE WHEN M.OUT_TYPE_DIV LIKE 'M2%'THEN M.OUT_TYPE_DIV END DESC;


--3
SELECT *
FROM (
    SELECT M.OUTBOUND_DATE, D.ITEM_CD, D.ITEM_NM, SUM(D.ORDER_QTY) AS SUM_QTY
    FROM LO_OUT_M M
         JOIN LO_OUT_D D ON D.INVOICE_NO = M.INVOICE_NO
    WHERE M.OUTBOUND_DATE BETWEEN '2019-06-01' AND '2019-06-30'
      AND D.ITEM_NM LIKE '%참치%'
    GROUP BY M.OUTBOUND_DATE, D.ITEM_CD, D.ITEM_NM
    ORDER BY SUM(D.ORDER_QTY) DESC
)
WHERE ROWNUM <= 10;


--4
SELECT DAN || '단' AS DANSU,
       DAN || '×' || NUM || '=' || (DAN * NUM) AS CONTENTS
FROM (  
        SELECT LEVEL+1 AS DAN 
        FROM DUAL 
        CONNECT BY LEVEL <= 8  
        ), (
        SELECT LEVEL AS NUM 
        FROM DUAL 
        CONNECT BY LEVEL <= 9  
        )
ORDER BY DAN, NUM;

--5
SELECT 학년  AS SCHOOL
FROM (  
        SELECT '초등학교 '||LEVEL || '학년' AS 초등 
        FROM DUAL 
        CONNECT BY LEVEL <= 6
        ), (
        SELECT '중학교 '||LEVEL || '학년' AS 중
        FROM DUAL 
        CONNECT BY LEVEL <= 3
        ), (
        SELECT '고등학교 '||LEVEL || '학년' AS 학년 
        FROM DUAL 
        CONNECT BY LEVEL <= 3
        )
;
