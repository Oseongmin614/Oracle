SELECT ORDER_QTY, AMOUNT
FROM  
    (SELECT  ORDER_QTY
            ,CASE WHEN ORDER_QTY = 0                THEN '없음'
                  WHEN ORDER_QTY BETWEEN 1 AND 0    THEN '소량'
                  WHEN ORDER_QTY <= 99              THEN '보통'
                  WHEN ITEM_WEIGHT = 1566           THEN '스패셜'
                  ELSE '대량'
            END AS AMOUNT
    FROM LO_OUT_D)
ORDER   BY AMOUNT;



SELECT *
FROM (
??? SELECT TO_CHAR(OUTBOUND_DATE, 'MM') AS MONTH, SET_QTY
??? FROM LO_OUT_M
??? WHERE OUTBOUND_DATE BETWEEN TO_DATE('2019-01-01', 'YYYY-MM-DD') AND TO_DATE('2019-12-31', 'YYYY-MM-DD')
)
PIVOT (
??? SUM(SET_QTY)
??? FOR MONTH IN ('01' AS M01, '02' AS M02, '03' AS M03, '04' AS M04, '05' AS M05, '06' AS M06, '07' AS M07, '08' AS M08, '09' AS M09, '10' AS M10, '11' AS M11, '12' AS M12)
);

SELECT BRAND_CD,INVOICE_NO,LINE_NO,ITEM_CD,ORDER_QTY
FROM A_OUT_D;

SELECT  *
FROM    LO_OUT_M;

SELECT  OUTBOUND_DATE, COUNT(OUT_TYPE_DIV) AS INVOICE_CNT
        ,COUNT(CASE WHEN OUT_TYPE_DIV LIKE 'M1%' THEN 1 END) AS M1_CNT
        ,COUNT(CASE WHEN OUT_TYPE_DIV LIKE 'M2%' THEN 1 END) AS M2_CNT
FROM    LO_OUT_M
WHERE   OUTBOUND_DATE BETWEEN   TO_DATE('2019-09-01', 'YYYY-MM-DD') 
                      AND       TO_DATE('2019-09-19', 'YYYY-MM-DD')
        AND ( 
            :COND = 0
            OR  (:COND = 1 AND OUT_BOX_DIV LIKE 'D%')
            OR  (:COND = 2 AND OUT_BOX_DIV LIKE 'F%')
        )
GROUP   BY OUTBOUND_DATE;

SELECT  OUTBOUND_DATE, COUNT(OUT_TYPE_DIV) AS INVOICE_CNT
        ,COUNT(CASE WHEN OUT_TYPE_DIV LIKE 'M1%' THEN 1 END) AS M1_CNT
        ,COUNT(CASE WHEN OUT_TYPE_DIV LIKE 'M2%' THEN 1 END) AS M2_CNT
FROM    LO_OUT_M
WHERE   OUTBOUND_DATE BETWEEN   TO_DATE('2019-09-01', 'YYYY-MM-DD')
                      AND       TO_DATE('2019-09-19', 'YYYY-MM-DD')
        AND(
            CASE WHEN :COND = 0 THEN 1
                 WHEN :COND = 1 AND OUT_BOX_DIV LIKE 'D%' THEN 1
                 WHEN :COND = 2 AND OUT_BOX_DIV LIKE 'F%' THEN 1
                 ELSE 0 END =1           
            )
GROUP   BY OUTBOUND_DATE;


SELECT  ITEM_BAR_CD,COUNT(DISTINCT ITEM_CD) AS ITEM_CD_COUNT
FROM    LO_OUT_D
GROUP   BY ITEM_BAR_CD
HAVING  COUNT(DISTINCT ITEM_CD) > 1
ORDER   BY 
        CASE WHEN ITEM_BAR_CD IS NULL THEN 1 ELSE 0 END
        ,ITEM_CD_COUNT DESC
        ,ITEM_BAR_CD;

SELECT  ITEM_BAR_CD,COUNT(DISTINCT ITEM_CD)AS ITEM_CNT
FROM    LO_OUT_D
GROUP   BY ITEM_BAR_CD
HAVING  COUNT(DISTINCT ITEM_CD)>1
ORDER   BY  CASE WHEN ITEM_BAR_CD IS NULL THEN 1 ELSE 0 END
            ,ITEM_CNT DESC;

SELECT  OUTBOUND_DATE,SUM(CASE WHEN EXTRACT(MONTH FROM OUTBOUND_DATE) = 1 THEN SET_QTY ELSE 0 END) AS M01,
        SUM(CASE WHEN EXTRACT(YEAR FROM OUTBOUND_DATE) = 2 THEN SET_QTY ELSE 0 END) AS M02,
        SUM(CASE WHEN EXTRACT(MONTH FROM OUTBOUND_DATE) = 3 THEN SET_QTY ELSE 0 END) AS M03,
        SUM(CASE WHEN EXTRACT(MONTH FROM OUTBOUND_DATE) = 4 THEN SET_QTY ELSE 0 END) AS M04,
        SUM(CASE WHEN EXTRACT(MONTH FROM OUTBOUND_DATE) = 5 THEN SET_QTY ELSE 0 END) AS M05,
        SUM(CASE WHEN EXTRACT(MONTH FROM OUTBOUND_DATE) = 6 THEN SET_QTY ELSE 0 END) AS M06,
        SUM(CASE WHEN EXTRACT(MONTH FROM OUTBOUND_DATE) = 7 THEN SET_QTY ELSE 0 END) AS M07,
        SUM(CASE WHEN EXTRACT(MONTH FROM OUTBOUND_DATE) = 8 THEN SET_QTY ELSE 0 END) AS M08,
        SUM(CASE WHEN EXTRACT(MONTH FROM OUTBOUND_DATE) = 9 THEN SET_QTY ELSE 0 END) AS M09,
        SUM(CASE WHEN EXTRACT(MONTH FROM OUTBOUND_DATE) = 10 THEN SET_QTY ELSE 0 END) AS M10,
        SUM(CASE WHEN EXTRACT(MONTH FROM OUTBOUND_DATE) = 11 THEN SET_QTY ELSE 0 END) AS M11,
        SUM(CASE WHEN EXTRACT(MONTH FROM OUTBOUND_DATE) = 12 THEN SET_QTY ELSE 0 END) AS M12
FROM    LO_OUT_M
WHERE   OUTBOUND_DATE BETWEEN TO_DATE('2019-01-01', 'YYYY-MM-DD') AND TO_DATE('2019-12-31', 'YYYY-MM-DD')
GROUP   BY OUTBOUND_DATE
ORDER   BY OUTBOUND_DATE;

SELECT  INVOICE_NO,LINE_NO,ITEM_CD,ITEM_NM,ORDER_QTY
FROM    LO_OUT_D
WHERE   INVOICE_NO = '346724706214'
ORDER   BY CASE WHEN :SORT_TYPE = '1' THEN NULL
                WHEN :SORT_TYPE = '2' THEN ORDER_QTY
                END || LINE_NO;


 --13
SELECT DISTINCT OUTBOUND_DATE
  FROM LO_OUT_M
 WHERE OUTBOUND_DATE BETWEEN '2019-06-16' AND '2019-06-25'
 ORDER BY OUTBOUND_DATE;
SELECT *
  FROM (
       SELECT TO_DATE(:OUT_DATE) + NO AS OUTBOUND_DATE
         FROM CS_NO
        WHERE NO <=10
       ) M1
 WHERE EXISTS (
              SELECT 1
                FROM LO_OUT_M C1
               WHERE C1.OUTBOUND_DATE = M1.OUTBOUND_DATE
              );
SELECT NO, TO_DATE(:OUT_DATE)+NO AS OUTBOUND_DATE
  FROM CS_NO
 WHERE NO <=10;
 SELECT LEVEL, TO_DATE(:OUT_DATE) + LEVEL AS OUTBOUND_DATE
   FROM DUAL
CONNECT BY LEVEL <= 10;
--14
--내가푼거 MAX가 여러개일때 LINE_NO도 무조건 MAX값만 가져옴
SELECT INVOICE_NO
      ,OUT_TYPE_DIV
      ,OUT_BOX_DIV
      ,(
       SELECT MAX(C1.ORDER_QTY)
         FROM LO_OUT_D C1
        WHERE C1.INVOICE_NO = M1.INVOICE_NO
       ) AS MAX_ORDER_QTY
      ,(
       SELECT MAX(C2.LINE_NO)
         FROM LO_OUT_D C2
        WHERE C2.INVOICE_NO = M1.INVOICE_NO
          AND C2.ORDER_QTY  = (
                              SELECT MAX(C3.ORDER_QTY)
                                FROM LO_OUT_D C3
                               WHERE C3.INVOICE_NO = M1.INVOICE_NO
                              )
       ) AS MAX_LINE_NO
  FROM LO_OUT_M M1
 WHERE OUTBOUND_DATE = '2019-06-03'
   AND OUTBOUND_NO BETWEEN 'D190603-897353' AND 'D190603-897360';
--교수님 풀이
SELECT INVOICE_NO
      ,OUT_TYPE_DIV
      ,OUT_BOX_DIV
      ,TO_NUMBER(SUBSTR(VAL, 1, 5))  AS MAX_ORDER_QTY
      ,TO_NUMBER(SUBSTR(VAL, 6, 10)) AS MAX_ITEM_CD
      ,TO_NUMBER(SUBSTR(VAL, 16))    AS MAX_LINE_NO
  FROM (
       SELECT INVOICE_NO
             ,OUT_TYPE_DIV
             ,OUT_BOX_DIV
             ,(--ORDER_QTY가 최대인 값중에 ITEM_CD가 가장 큰 값을 LINE_NO와 같이 찾기
              SELECT MAX(LPAD(C1.ORDER_QTY,5,'0')|| LPAD(C1.ITEM_CD, 10, '0') || LPAD(C1.LINE_NO, 5, '0'))
                FROM LO_OUT_D C1
               WHERE C1.INVOICE_NO = M1.INVOICE_NO
              ) AS VAL
         FROM LO_OUT_M M1
        WHERE OUTBOUND_DATE = '2019-06-03'
          AND OUTBOUND_NO BETWEEN 'D190603-897353' AND 'D190603-897360'
       );
--인터넷에서 본해결방법 이것도 MAX여러개일때 LINE_NO도 여러개 가져옴
SELECT INVOICE_NO
      ,OUT_TYPE_DIV
      ,OUT_BOX_DIV
      ,(
       SELECT MAX(C1.ORDER_QTY)
         FROM LO_OUT_D C1
        WHERE C1.INVOICE_NO = M1.INVOICE_NO
       ) AS MAX_ORDER_QTY
      ,(
       SELECT MAX(C2.LINE_NO) KEEP(DENSE_RANK FIRST ORDER BY C2.ORDER_QTY DESC)
         FROM LO_OUT_D C2
        WHERE C2.INVOICE_NO = M1.INVOICE_NO
       ) AS MAX_LINE_NO
  FROM LO_OUT_M M1
 WHERE OUTBOUND_DATE = '2019-06-03'
   AND OUTBOUND_NO BETWEEN 'D190603-897353' AND 'D190603-897360';

